# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- v0.*

pr:
- master
- v0.*

jobs:
- job:
  displayName: "C MinGW Windows"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      cmake  -G "MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND" .
      make YASL
      make YASLTEST
      make yaslapi
    displayName: "Generate Solution"
- job:
  displayName: "C MSVC Windows"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script:
      cmake -G "Visual Studio 15" .
    displayName: "Generate Solution"  
  - task: MSBuild@1
    inputs:
      solution: YASL.sln
    displayName: "Compile"
- job: 
  displayName: "C GCC Ubuntu"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      cmake .
      make YASL
      make YASLTEST
      make yaslapi
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run Tests"
- job: 
  displayName: "C Clang Ubuntu"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      export CC=clang
      export CXX=clang++
      cmake .
      make YASL
      make YASLTEST
      make yaslapi
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run Tests"
- job: 
  displayName: "C++ GCC Ubuntu"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      cmake -Dcpp=true
      cmake .
      make YASL
      make YASLTEST
      make yaslapi
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run Tests"  
- job: 
  displayName: "C++ Clang Ubuntu"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      export CC=clang
      export CXX=clang++
      cmake -Dcpp=true
      cmake .
      make YASL
      make YASLTEST
      make yaslapi
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run Tests"
- job: 
  displayName: "C Clang MacOS"
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - script: |
      export CC=clang
      export CXX=clang++
      cmake .
      make YASL
      make YASLTEST
      make yaslapi
    displayName: "Compile"
  - script:
      ./tests -m
    displayName: "Run Tests"  
- job: 
  displayName: "C++ Clang MacOS"
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - script: |
      export CC=clang
      export CXX=clang++
      cmake -Dcpp=true
      cmake .
      make YASL
      make YASLTEST
      make yaslapi
    displayName: "Compile"
  - script:
      ./tests -m
    displayName: "Run Tests"  
